# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- prod

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '9e1b8301-d8cb-4c0e-8520-8ba6abd4ec0f'
  imageRepository: 'anandurajkumarspringboot'
  containerRegistry: 'bootstrapapp.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'bootstrapapp97752035-auth'
  azureSubscription: 'Free Trial(1)(75ec71dc-2d2f-4c3e-b30b-e09eaef127a0)'
  azureResourceGroup: 'bootstraper-rg'
  kubernetesCluster: 'boot-aks'
  releaseName: 'bootstrapp-app'
  helmchart: 'springboot-chart'
  namespace: 'prod'
  azureServiceConnection: 'boot-aks-service-connection'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


  - job: RunCommand
    displayName: Run Your Command
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        # Replace this with the command you want to run
        echo "Running your command here"
        ls
        pwd
        
      displayName: 'Run Your Command'

# - stage: createnamespace
#   displayName: create namespace
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: AzureCLI@2
#       displayName: 'Create Namespace'
#       inputs:
#         azureSubscription: $(azureServiceConnection)
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           namespaceExists=$(kubectl get namespace $(namespace) --output jsonpath='{.metadata.name}' 2>/dev/null || echo '')
#           if [ -z "$namespaceExists" ]; then
#             kubectl create namespace $(namespace)
#           else
#             echo "Namespace $(namespace) already exists. Skipping creation."
#           fi



- stage: deploy
  displayName: deploy stage
  jobs:
  - job: deploy
    displayName: deploy
    pool:
      vmImage: $(vmImageName)
    timeoutInMinutes: 60
    steps:
    - task: HelmInstaller@1
      displayName: install helm
      inputs:
        helmVersionToInstall: 'latest'
    # - task: Kubernetes@1
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceEndpoint: 'boot-aks-default'
    #     command: 'apply'
    #     useConfigurationFile: true
    #     configurationType: 'inline'
    #     inline: |
    #       apiVersion: v1
    #       kind: Namespace
    #       metadata:
    #         name: $(namespace)
    # - task: HelmDeploy@0
    #   inputs:
    #     connectionType: 'Azure Resource Manager'
    #     azureSubscription: $(azureSubscription)
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: 'upgrade'
    #     chartType: 'FilePath'
    #     chartPath: $(helmchart)
    #     releaseName: $(releaseName)
    #     namespace: $(namespace)
    #     recreate: true
    #     waitForExecution: false'
    #     overrideValues: |
    #          image.repository=$(containerRegistry)/$(imageRepository)
    #          image.tag=$(tag)
    #          image.pullSecret=$(imagePullSecret)
    # - task: Kubernetes@1
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceEndpoint: 'boot-aks-default'
    #     command: 'create'
    #     secretType: 'dockerRegistry'
    #     containerRegistryType: 'Azure Container Registry'
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: |
    #       namespaceExists=$(kubectl get namespace $(namespace) --output jsonpath='{.metadata.name}' 2>/dev/null || echo '')
    #       if [ -z "$namespaceExists" ]; then
    #         kubectl create namespace $(namespace)
    #       else
    #         echo "Name
  - job: RunCommand
    displayName: Run Your Command
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        # Replace this with the command you want to run
        echo "Running your command here"
        ls
        pwd
        cd springboot-chart
        ls
        
      displayName: 'Run Your Command'
    - task: HelmDeploy@0
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'boot-aks-service-connection'
        azureResourceGroup: 'bootstraper-rg'
        kubernetesCluster: 'boot-aks'
        namespace: 'develop'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: $(helmchart)
        releaseName: 'bootstrapp-app'
        valueFile: 'prod-values.yaml'
        recreate: false
        waitForExecution: false
        overrideValues: |
             image.repository=$(containerRegistry)/$(imageRepository)
             image.tag=$(tag)
             image.pullSecret=$(imagePullSecret)